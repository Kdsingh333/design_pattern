package main

import (
	"fmt"
	"io"
	"net/http"
	"os"
	"sync"
	"time"
)

func main() {
     start_time := time.Now()
    // fmt.Print("Start time" ,time.Now().);
	var wg sync.WaitGroup

	arr := []string{"https://www.programiz.com/golang/online-compiler/", "https://www.example.com/","https://unplex.app/","https://www.w3schools.com/go/go_arrays.php","https://www.digitalocean.com/community/tutorials/how-to-make-http-requests-in-go","https://docs.oracle.com/javase/tutorial/collections/custom-implementations/index.html","https://kdsingh333.github.io/page-replacement-kd.github.io/","https://www.coingecko.com/en/coins/pi-network/inr","https://www.programiz.com/java-programming/online-compiler/","https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md#approximation-constraint-element","https://www.mridul.tech/","https://www.mantralabsglobal.com/"}
	
	index := 0
	for _, req := range arr {
		wg.Add(1)
		go Urlhit(req,&wg,arr,uint64(index))
		index++
	}
	wg.Wait()
	fmt.Print(index)

	// for _, resbody := range arr {
	// 	fmt.Println("response body : ", resbody)
	// }

	End_time := time.Now()

	time_differnce := End_time.Sub(start_time)

	fmt.Println("Time taken to execute the code : ", time_differnce)
}

func Urlhit(url string, wg *sync.WaitGroup, arr []string, index uint64) {
	defer wg.Done()
	// requestURL := fmt.Sprintf("http://localhost:%d", serverPort)
	req, err := http.NewRequest(http.MethodGet, url, nil)
	if err != nil {
		fmt.Printf("client: could not create request: %s\n", err)
		os.Exit(1)
	}

	res, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Printf("client: error making http request: %s\n", err)
		os.Exit(1)
	}

	resBody, err := io.ReadAll(res.Body)
	if err != nil {
		fmt.Printf("client: could not read response body: %s\n", err)
		os.Exit(1)
	}

	// fmt.Printf("client: response body: %s\n", resBody)
	arr[index] = string(resBody)

}
